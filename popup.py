from PyQt4.Qt import *
from PyQt4 import QtCore, QtGui

try:
	_fromUtf8 = QtCore.QString.fromUtf8
except AttributeError:
	def _fromUtf8(s):
		return s

try:
	_encoding = QtGui.QApplication.UnicodeUTF8
	def _translate(context, text, disambig):
		return QtGui.QApplication.translate(context, text, disambig, _encoding)
except AttributeError:
	def _translate(context, text, disambig):
		return QtGui.QApplication.translate(context, text, disambig)

class PopupWindow(QWidget):
	def __init__(self, infoHTML):
		QWidget.__init__(self)
		super()

		# LAYOUT CODE - GENERATED BY QTDESIGNER
		self.setObjectName(_fromUtf8("Popup"))
		self.setGeometry(10, 10, 253, 72)
		self.setWindowOpacity(0.8)
		self.setStyleSheet(_fromUtf8(""))

		self.frame = QtGui.QFrame(self)
		self.frame.setGeometry(QtCore.QRect(1, 1, 251, 70))
		self.frame.setStyleSheet(_fromUtf8("background-color: rgb(0, 0, 0);\n" "color: rgb(255, 255, 255);"))
		self.frame.setFrameShape(QtGui.QFrame.StyledPanel)
		self.frame.setFrameShadow(QtGui.QFrame.Raised)
		self.frame.setObjectName(_fromUtf8("frame"))

		self.textBrowser = QtGui.QTextBrowser(self.frame)
		self.textBrowser.setGeometry(QtCore.QRect(0, 0, 248, 70))
		sizePolicy = QtGui.QSizePolicy(QtGui.QSizePolicy.Expanding, QtGui.QSizePolicy.Expanding)
		sizePolicy.setHorizontalStretch(0)
		sizePolicy.setVerticalStretch(0)
		sizePolicy.setHeightForWidth(self.textBrowser.sizePolicy().hasHeightForWidth())
		self.textBrowser.setSizePolicy(sizePolicy)
		self.textBrowser.setAutoFillBackground(False)
		self.textBrowser.setFrameShape(QtGui.QFrame.NoFrame)
		self.textBrowser.setFrameShadow(QtGui.QFrame.Sunken)
		self.textBrowser.setOpenExternalLinks(True)
		self.textBrowser.setOpenLinks(True)
		self.textBrowser.setObjectName(_fromUtf8("textBrowser"))
		self.toolButton = QtGui.QToolButton(self.frame)
		self.toolButton.setGeometry(QtCore.QRect(208, 70, 42, 19))
		self.toolButton.setStyleSheet(_fromUtf8("background-color: rgb(90, 90, 90);"))
		self.toolButton.setObjectName(_fromUtf8("toolButton"))

		self.toolButton.setText(_translate("Popup", "Close", None))
		self.toolButton.clicked.connect(self.close)

		self.setWindowFlags(QtCore.Qt.FramelessWindowHint | QtCore.Qt.WindowStaysOnTopHint)
		
		self.setWindowTitle(_translate("Popup", "Notification", None))
		self.textBrowser.setHtml(_translate("MainWindow", "<html><head></head><body>" + infoHTML + "</body></html>", None))

		self.filter = TestFilter()
		self.installEventFilter(self.filter)

		self.testtimer = QTimer();
		self.testtimer.timeout.connect(self.close)

		self.handleTimer(True)

		# play sound
		QtGui.QSound('popup.wav').play()


	def handleTimer(self, timerEnable):
		if timerEnable:
			self.testtimer.start(5000)
		else:
			self.testtimer.stop()


	def mouseHandler(sender, popupWindowObject, isMouseInWindow):
		if isMouseInWindow:
			popupWindowObject.setWindowOpacity(1)
			popupWindowObject.resize(253, 91)

			popupWindowObject.frame.setGeometry(QtCore.QRect(1, 1, 251, 89))
			popupWindowObject.handleTimer(False) #Disable timer
		else:
			popupWindowObject.setWindowOpacity(0.7)
			popupWindowObject.resize(253, 71)

			popupWindowObject.frame.setGeometry(QtCore.QRect(1, 1, 251, 69))
			popupWindowObject.handleTimer(True) #Re-enable timer


class TestFilter(QObject):
	def eventFilter(self, sender, event):
		# print("test")
		if event.type() == QEvent.Enter:
			# sender.setWindowOpacity(1)
			sender.mouseHandler(sender, True)
			return True
		elif event.type() == QEvent.Leave:
			# sender.setWindowOpacity(0.7)
			sender.mouseHandler(sender, False)
			return True
		else:
			return False